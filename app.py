# app.py
import streamlit as st
import pandas as pd
import joblib
import numpy as np

st.set_page_config(page_title="Heart Disease Risk", page_icon="‚ù§Ô∏è", layout="centered")

@st.cache_resource
def load_pipeline(path="heart_pipeline.pkl"):
    return joblib.load(path)

pipe = load_pipeline()

st.title("‚ù§Ô∏è –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ä–∏—Å–∫–∞ —Å–µ—Ä–¥–µ—á–Ω–æ–≥–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è")
st.write("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏.")

with st.form("input_form"):
    col1, col2 = st.columns(2)

    with col1:
        age = st.number_input("Age", min_value=18, max_value=120, value=50)
        resting_bp = st.number_input("RestingBP", min_value=0, max_value=300, value=130)
        cholesterol = st.number_input("Cholesterol", min_value=0, max_value=800, value=200,
                                      help="0 –±—É–¥–µ—Ç —Ç—Ä–∞–∫—Ç–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø—Ä–æ–ø—É—Å–∫ –∏ –∑–∞–º–µ–Ω—ë–Ω —Å—Ä–µ–¥–Ω–∏–º")
        max_hr = st.number_input("MaxHR", min_value=0, max_value=250, value=150)
        oldpeak = st.number_input("Oldpeak (ST depression)", min_value=-5.0, max_value=10.0, value=1.0, step=0.1)

    with col2:
        sex = st.selectbox("Sex", ["M","F"])
        chest_pain = st.selectbox("ChestPainType", ["ATA","NAP","ASY","TA"])
        resting_ecg = st.selectbox("RestingECG", ["Normal","ST","LVH"])
        fasting_bs = st.selectbox("FastingBS (–≥–ª—é–∫–æ–∑–∞ ‚â• 120 mg/dl?)", [0,1])
        exercise_angina = st.selectbox("ExerciseAngina", ["Y","N"])
        st_slope = st.selectbox("ST_Slope", ["Up","Flat","Down"])

    submitted = st.form_submit_button("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å")

if submitted:
    # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç –∫–∞–∫ DataFrame –≤ —Ç–æ–º –∂–µ –≤–∏–¥–µ, —á—Ç–æ –Ω–∞ –æ–±—É—á–µ–Ω–∏–∏
    row = pd.DataFrame([{
        "Age": age,
        "Sex": sex,
        "ChestPainType": chest_pain,
        "RestingBP": resting_bp,
        "Cholesterol": cholesterol,
        "FastingBS": int(fasting_bs),
        "RestingECG": resting_ecg,
        "MaxHR": max_hr,
        "ExerciseAngina": exercise_angina,
        "Oldpeak": oldpeak,
        "ST_Slope": st_slope,
    }])

    try:
        y_pred = pipe.predict(row)[0]
        proba = None
        # –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç predict_proba ‚Äî –ø–æ–∫–∞–∂–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å ¬´–±–æ–ª–µ–∑–Ω–∏ = 1¬ª
        if hasattr(pipe.named_steps["model"], "predict_proba"):
            proba = float(pipe.predict_proba(row)[0][1])

        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç")
        if y_pred == 1:
            st.error("üß† –ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç: **—Ä–∏—Å–∫ –ø–æ–≤—ã—à–µ–Ω (1)**")
        else:
            st.success("üß† –ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç: **—Ä–∏—Å–∫ –Ω–∏–∑–∫–∏–π (0)**")

        if proba is not None:
            st.write(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ 1: **{proba:.3f}**")
            # –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            st.progress(min(max(proba, 0.0), 1.0))

        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Å–∫—Ä—ã–≤–∞–µ–º –∑–∞ —ç–∫—Å–ø–∞–Ω–¥–µ—Ä–æ–º)
        with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"):
            st.write(row)

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞: {e}")
        st.stop()

st.caption("–ú–æ–¥–µ–ª—å: –µ–¥–∏–Ω—ã–π Pipeline (preprocessor + model), –æ–±—É—á–µ–Ω–Ω—ã–π –æ—Ñ—Ñ–ª–∞–π–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∏–∑ pickle.")
